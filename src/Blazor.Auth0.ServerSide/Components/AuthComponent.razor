@using Microsoft.AspNetCore.Components
@using Blazor.Auth0.Shared.Models.Enumerations
@using Blazor.Auth0.ServerSide.Authentication

@inherits ComponentBase

@inject AuthenticationService _authService
@inject IUriHelper _uriHelper


@switch (_authService.SessionState)
{
    case SessionStates.Undefined:
        @AuthorizingContent
        break;
    case SessionStates.Active:

        @AuthorizedContent

        break;
    case SessionStates.Inactive:

        if (!isProtectedPath)
        {
            @AuthorizedContent
        }
        else
        {
            @NotAuthorizedContent
        }

        break;
}


@code{

[Parameter]
private List<string> ProtectedPaths { get; set; } = new List<string>();

[Parameter]
private bool LoginRequiredOnProtectedPaths { get; set; } = false;

[Parameter]
private RenderFragment AuthorizingContent { get; set; }

[Parameter]
private RenderFragment AuthorizedContent { get; set; }

[Parameter]
private RenderFragment NotAuthorizedContent { get; set; }


private bool isProtectedPath = false;
private bool latestStatusOk = true;


protected override void OnInit()
{

    _authService.OnSessionStateChanged += OnSessionStateChangeHandler;

    if (ProtectedPaths.Count > 0)
    {

        _uriHelper.OnLocationChanged += (a, b) =>
        {

            var uri = new Uri(b.Location);
            var path = uri.GetComponents(UriComponents.Path, UriFormat.Unescaped).ToLower();
            isProtectedPath = ProtectedPaths.Contains(path);

            // Enforcing user log-in for this paths
            if (_authService.SessionState != SessionStates.Active && isProtectedPath)
            {

                latestStatusOk = false;

                if (LoginRequiredOnProtectedPaths)
                {
                    _authService.Authorize();
                    System.Threading.Thread.Sleep(30000);
                    _uriHelper.NavigateTo("/");
                }
                else
                {
                    StateHasChanged();
                }

            }
            else if (!latestStatusOk)
            {

                latestStatusOk = true;
                StateHasChanged();

            }

        };
    }

    base.OnInit();

}


protected void OnSessionStateChangeHandler(object sender, SessionStates state)
{
    StateHasChanged();
}

}
