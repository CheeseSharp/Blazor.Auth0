@inject AuthenticationService _authService

@if (_authService.SessionState == SessionStates.Undefined)
{
    @UndefinedSessionContent
}

@if (_authService.SessionState == SessionStates.Active)
{
    @ActiveSessionContent
}

@if (_authService.SessionState == SessionStates.Inactive)
{
    @InactiveSessionContent
}

@if (_authService.SessionState == SessionStates.Inactive || _authService.SessionState == SessionStates.Active)
{
    @ActiveInactiveSessionContent
}

@functions{

    [Parameter]
    private RenderFragment UndefinedSessionContent { get; set; }

    [Parameter]
    private RenderFragment ActiveSessionContent { get; set; }

    [Parameter]
    private RenderFragment InactiveSessionContent { get; set; }

    [Parameter]
    private RenderFragment ActiveInactiveSessionContent { get; set; }

    protected override void OnInit()
    {
        _authService.OnSessionStateChanged += OnSessionStateChangeHandler;
        base.OnInit();
    }

    protected void OnSessionStateChangeHandler(object sender, SessionStates state) {
        StateHasChanged();
    }

}
